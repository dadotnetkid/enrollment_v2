@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "AvailableSubjectsGridView";

        settings.Width = Unit.Percentage(100);

        settings.CallbackRouteValues = new
        {
            Controller = "Subjects",
            Action = "AvailableSubjectsGridView",
            studentId = ViewBag.StudentId
        };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Subjects", Action = "AvailableSubjectsGridViewAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Subjects", Action = "AvailableSubjectsGridViewUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Subjects", Action = "AvailableSubjectsGridViewDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.SettingsPager.PageSize = 50;
        settings.KeyFieldName = "Id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;

        settings.AddAddEditDeleteToolbar(items =>
        {
            items.CanAdd = User.UserInAction("Add Available Subjects");
            items.CanEdit = User.UserInAction("Edit Available Subjects");
            items.CanDelete = User.UserInAction("Delete Available Subjects");

            items.MenuItems.Add(item =>
            {
                item.SetTemplateContent(s =>
                {
                    Html.DevExpress().Button(btnSettings =>
                    {
                        btnSettings.Name = "btnCopyAvailableSubjects";
                        btnSettings.Text = "Copy Subjects";

                        btnSettings.ClientSideEvents.Click = "function(s,e){showCopySubjectPopup()}";

                    }).GetHtml();

                });
            });


        });

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 300;
        settings.PreRender = (s, e) =>
        {
            var x = s as MVCxGridView;
            x.ExpandRow(0);
        };
        settings.Columns.Add("AvailableCourses.SchoolYears.SchoolYear").GroupIndex = 0;
        settings.Columns.Add("AvailableCourses.Courses.Course").GroupIndex = 1;

        settings.Columns.Add("SubjectCode");
        settings.Columns.Add("Subjects.Subject");
        settings.Columns.Add("Subjects.Description");
        settings.Columns.Add("Schedule");


        settings.Columns.Add(col =>
        {
            col.FieldName = "UserDetails.FullName";
            col.Caption = "Teacher";
            col.ColumnType = MVCxGridViewColumnType.ComboBox;
            var cbo = col.PropertiesEdit as ComboBoxProperties;
            cbo.DataSource = (Model as List<AvailableSubjects>)?.Select(x => new { Teacher = x.UserDetails?.FullName }).GroupBy(x => x.Teacher).Select(x => new { Teacher = x.Key });
            cbo.TextField = "Teacher";
        });
        settings.Columns.Add(col =>
        {
            col.FieldName = "AvailableCourses.AvailableCourse";
            col.ColumnType = MVCxGridViewColumnType.ComboBox;
            var cbo = col.PropertiesEdit as ComboBoxProperties;
            cbo.DataSource = (Model as List<AvailableSubjects>)?.Select(x => new { AvailableCourse = x.AvailableCourses.AvailableCourse }).GroupBy(x => x.AvailableCourse).Select(x => new { course = x.Key });
            cbo.TextField = "Course";
            col.GroupIndex = 2;
        });



        settings.SetEditFormTemplateContent(col =>
        {



            Html.DevExpress().PopupControl(pop =>
            {
                pop.HeaderText = "Available Subject";
                pop.Width = Unit.Pixel(700);
                pop.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
                pop.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
                pop.Name = col.KeyValue + "_popup";
                pop.Modal = true;
                pop.ShowOnPageLoad = true;
                pop.CloseOnEscape = false;
                pop.ShowCloseButton = true;
                pop.ClientSideEvents.CloseUp = "function(s,e){AvailableSubjectsGridView.CancelEdit()}";
                pop.CloseAction = CloseAction.CloseButton;
                pop.SetContent(() =>
                {

                    Html.RenderAction("AddEditAvailableSubjectsPartial", new { availableSubjectId = col.KeyValue });

                });
            }).GetHtml();
        });
    });
    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()
