@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "EnrollmentsGridView";
        settings.Width = Unit.Percentage(100);
        settings.CallbackRouteValues = new { Controller = "Enrollments", Action = "EnrollmentsGridViewPartial" };

        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Enrollments", Action = "EnrollmentsGridViewPartialAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Enrollments", Action = "EnrollmentsGridViewPartialUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Enrollments", Action = "EnrollmentsGridViewPartialDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.EditFormAndDisplayRow;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;

        settings.KeyFieldName = "Id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowSelectByRowClick = true;
        settings.AddAddEditDeleteToolbar(User.UserInAction("Add Enrollment"), User.UserInAction("Edit Enrollment"), User.UserInAction("Delete Enrollment"));
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.Off;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.None;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;
        settings.SettingsPager.PageSize = 50;
        settings.PreRender = (s, e) =>
        {
            var g = s as MVCxGridView;
            g.ExpandAll();
        };
        settings.Columns.Add(col =>
        {
            col.FieldName = "AvailableCourses.Courses.Course";
            col.Caption = "Course";
            col.GroupIndex = 0;

        });
        settings.Columns.Add(col =>
        {
            col.FieldName = "AvailableCourses.SchoolYears.SchoolYear";
            col.Caption = "School Year";
            col.GroupIndex = 1;
        });
        settings.Columns.Add(col =>
        {
            col.FieldName = "UserDetails.FullName";
            col.ColumnType = MVCxGridViewColumnType.ComboBox;
            col.Caption = "Student";
            var cbo = col.PropertiesEdit as ComboBoxProperties;
            cbo.DataSource = new UnitOfWork().UserDetailsRepo.Get();
            cbo.TextField = "FullName";
            cbo.ValueField = "FullName";
        });
        settings.Columns.Add(col =>
        {
            col.FieldName = "AvailableCourses.Courses.Course";
            col.ColumnType = MVCxGridViewColumnType.ComboBox;
            var cbo = col.PropertiesEdit as ComboBoxProperties;
            cbo.DataSource = new UnitOfWork().CoursesRepo.Get();
            cbo.TextField = "Course";
            cbo.ValueField = "Course";
        });
        settings.Columns.Add(col =>
        {
            col.FieldName = "AvailableCourses.SchoolYears.SchoolYearAndSemester";
            col.ColumnType = MVCxGridViewColumnType.ComboBox;
            var cbo = col.PropertiesEdit as ComboBoxProperties;
            cbo.DataSource = new UnitOfWork().SchoolYearsRepo.Get();
            cbo.TextField = "SchoolYearAndSemester";
            cbo.ValueField = "SchoolYearAndSemester";
        });
        settings.Columns.Add(col =>
        {
            col.FieldName = "AvailableCourses.TotalMiscellaneous";
            col.PropertiesEdit.DisplayFormatString = "Php #,#.0#";

        });
        settings.Columns.Add(col =>
        {
            col.FieldName = "Balance";
            col.PropertiesEdit.DisplayFormatString = "Php #,#.0#";
        });
        settings.Columns.Add(col =>
        {
            col.ColumnType = MVCxGridViewColumnType.CheckBox;
            col.FieldName = "IsDrop";
        });
        settings.Columns.Add(col =>
        {
            col.ColumnType = MVCxGridViewColumnType.HyperLink;
            col.SetDataItemTemplateContent(colSetting =>
            {
                var enrollmentId = colSetting.KeyValue;
                Html.DevExpress().HyperLink(h =>
                {
                    h.Name = "print" + enrollmentId;
                    h.Properties.Text = "Print";
                    h.Properties.ClientSideEvents.Click = "function(s,e){showBillingReport('" + enrollmentId.ToString() + "')}";

                }).GetHtml();

            });
        });
        settings.SetEditFormTemplateContent(col =>
        {
            Html.DevExpress().PopupControl(pop =>
            {
                pop.HeaderText = "Enrollment";
                pop.Width = 700;
                pop.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
                pop.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
                pop.Name = col.KeyValue + "_popup";
                pop.Modal = true;
                pop.ShowOnPageLoad = true;
                pop.CloseOnEscape = false;
                pop.ShowCloseButton = true;
                pop.ClientSideEvents.CloseUp = "function(s,e){EnrollmentsGridView.CancelEdit()}";
                pop.CloseAction = CloseAction.CloseButton;
                pop.SetContent(() =>
                {
                    Html.RenderAction("AddEditEnrollmentPartial", new { enrollmentId = col.KeyValue, courseId = ViewBag.CourseId });
                });
            }).GetHtml();

        });
    });
    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()