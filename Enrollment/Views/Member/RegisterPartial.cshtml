@model RegisterViewModel
@Html.HiddenFor(m=>m.RegistrationType)
<div class="form-group has-feedback margin-top-10 form-group-left">
    <span class="glyphicon glyphicon-envelope form-control-feedback"></span>
    @{
        Html.DevExpress().TextBoxFor(m => m.Email, settings =>
        {
            settings.Width = Unit.Percentage(100);
            settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            settings.Properties.ValidationSettings.SetFocusOnError = true;
            settings.Properties.ValidationSettings.ValidateOnLeave = true;
            settings.Properties.ValidationSettings.Display = Display.Dynamic;
            settings.Properties.NullText = "Username";
            settings.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
            settings.ShowModelErrors = true;
        }).GetHtml();
    }

</div>
<div class="form-group has-feedback form-group-left">
    @{
        Html.DevExpress().TextBoxFor(m => m.Password, settings =>
        {
            settings.Width = Unit.Percentage(100);
            settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            settings.Properties.ValidationSettings.SetFocusOnError = true;
            settings.Properties.ValidationSettings.ValidateOnLeave = true;
            settings.Properties.ValidationSettings.Display = Display.Dynamic;
            settings.Properties.NullText = "Password";
            settings.Properties.Password = true;
            settings.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
            settings.ShowModelErrors = true;
        }).GetHtml();
    }
    <span class="glyphicon glyphicon-lock form-control-feedback"></span>
</div>
@if (Model.RegistrationType == RegistrationType.Individual)
{
    <div class="form-group has-feedback form-group-left">
        @{
            Html.DevExpress().TextBoxFor(m => m.FirstName, settings =>
            {
                settings.Width = Unit.Percentage(100);
                settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
                settings.Properties.ValidationSettings.SetFocusOnError = true;
                settings.Properties.ValidationSettings.ValidateOnLeave = true;
                settings.Properties.ValidationSettings.Display = Display.Dynamic;
                settings.Properties.NullText = "First Name";
                settings.ShowModelErrors = true;
            }).GetHtml();
        }
        <span class="fa fa-user form-control-feedback"></span>
    </div>
    <div class="form-group has-feedback form-group-left">
        @{
            Html.DevExpress().TextBoxFor(m => m.MiddleName, settings =>
            {
                settings.Width = Unit.Percentage(100);
                settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
                settings.Properties.ValidationSettings.SetFocusOnError = true;
                settings.Properties.ValidationSettings.ValidateOnLeave = true;
                settings.Properties.ValidationSettings.Display = Display.Dynamic;
                settings.ShowModelErrors = true;
                settings.Properties.NullText= "Middle Name";
            }).GetHtml();
        }
        <span class="fa fa-user form-control-feedback"></span>
    </div>
    <div class="form-group has-feedback form-group-left">
        @{
            Html.DevExpress().TextBoxFor(m => m.LastName, settings =>
            {
                settings.Width = Unit.Percentage(100);
                settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
                settings.Properties.ValidationSettings.SetFocusOnError = true;
                settings.Properties.ValidationSettings.ValidateOnLeave = true;
                settings.Properties.ValidationSettings.Display = Display.Dynamic;
                settings.ShowModelErrors = true;
                settings.Properties.NullText= "Last Name";
            }).GetHtml();
        }
        <span class="fa fa-user form-control-feedback"></span>
    </div>
   
}
            
<div class="form-group has-feedback form-group-left">
    @{
        Html.DevExpress().TextBoxFor(m => m.CompanyName, settings =>
        {
            settings.Width = Unit.Percentage(100);
            settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            settings.Properties.ValidationSettings.SetFocusOnError = true;
            settings.Properties.ValidationSettings.ValidateOnLeave = true;
            settings.Properties.ValidationSettings.Display = Display.Dynamic;
            settings.ShowModelErrors = true;
            settings.Properties.NullText= "Company Name";
            settings.Properties.ConvertEmptyStringToNull = true;
        }).GetHtml();
    }
    <span class="fa fa-building form-control-feedback"></span>
</div>

<div class="form-group has-feedback form-group-left">
    @{
        Html.DevExpress().TextBoxFor(m => m.Address, settings =>
        {
            settings.Width = Unit.Percentage(100);
            settings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            settings.Properties.ValidationSettings.SetFocusOnError = true;
            settings.Properties.ValidationSettings.ValidateOnLeave = true;
            settings.Properties.ValidationSettings.Display = Display.Dynamic;
            settings.ShowModelErrors = true;
            settings.Properties.NullText = "Address";
        }).GetHtml();
    }
    <span class="fa fa-address-book form-control-feedback"></span>
</div>



<div class="row">
    <div class="col-lg-12">
        @{
            Html.DevExpress().Button(settings =>
            {
                settings.Name = "btnSignup";
                settings.Text = "Register";
                settings.Width = Unit.Percentage(100);
                settings.UseSubmitBehavior = true;
            }).GetHtml();
        }
    </div>
</div>